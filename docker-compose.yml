# Docker Compose configuration for QuantumSentinel-Nexus

services:
  # Redis - Knowledge Graph Database
  redis:
    image: redis:7.0-alpine
    container_name: quantumsentinel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - quantumsentinel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # TimescaleDB - Time-series Data Storage
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: quantumsentinel-timescaledb
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: quantumsentinel
      POSTGRES_USER: quantumsentinel
      POSTGRES_PASSWORD: secure-password-change-me
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    networks:
      - quantumsentinel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantumsentinel"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Main Orchestrator
  orchestrator:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.orchestrator
    container_name: quantumsentinel-orchestrator
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - TIMESCALE_DATABASE=quantumsentinel
      - TIMESCALE_USERNAME=quantumsentinel
      - TIMESCALE_PASSWORD=secure-password-change-me
      - LOG_LEVEL=INFO
      - FRAMEWORK_VERSION=6.0
    volumes:
      - ./reports:/app/reports
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - redis
      - timescaledb
    networks:
      - quantumsentinel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SAST Agent
  sast-agent:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.sast-agent
    container_name: quantumsentinel-sast-agent
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AGENT_TYPE=sast
      - ML_MODEL_PATH=/app/models
    volumes:
      - ./ml_models:/app/models
      - ./data:/app/data
    depends_on:
      - redis
    networks:
      - quantumsentinel-network
# Removed replicas due to container_name conflict

  # DAST Agent
  dast-agent:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.dast-agent
    container_name: quantumsentinel-dast-agent
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AGENT_TYPE=dast
    depends_on:
      - redis
    networks:
      - quantumsentinel-network
    cap_add:
      - NET_RAW
      - NET_ADMIN

  # Binary Agent
  binary-agent:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.binary-agent
    container_name: quantumsentinel-binary-agent
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AGENT_TYPE=binary
    volumes:
      - ./tools:/app/tools
    depends_on:
      - redis
    networks:
      - quantumsentinel-network

  # Recon Agent
  recon-agent:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.recon-agent
    container_name: quantumsentinel-recon-agent
    restart: unless-stopped
    ports:
      - "8084:8084"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AGENT_TYPE=recon
      - SHODAN_API_KEY=${SHODAN_API_KEY:-your-shodan-api-key}
    depends_on:
      - redis
    networks:
      - quantumsentinel-network

  # Research Agent
  research-agent:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.research-agent
    container_name: quantumsentinel-research-agent
    restart: unless-stopped
    ports:
      - "8085:8085"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AGENT_TYPE=research
    volumes:
      - ./research:/app/research
    depends_on:
      - redis
    networks:
      - quantumsentinel-network

  # Validator Agent
  validator-agent:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.validator-agent
    container_name: quantumsentinel-validator-agent
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AGENT_TYPE=validator
    depends_on:
      - redis
    networks:
      - quantumsentinel-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: quantumsentinel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - orchestrator
    networks:
      - quantumsentinel-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: quantumsentinel-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - quantumsentinel-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quantumsentinel-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - quantumsentinel-network

volumes:
  redis_data:
    driver: local
  timescaledb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  quantumsentinel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16